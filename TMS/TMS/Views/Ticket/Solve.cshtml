@model TMS.ViewModels.TicketSolveViewModel
@{
    ViewBag.Title = "Solve Ticket";
    string UserRole = ViewBag.Role;
}
@{
    if (ViewBag.Role == "Technician")
    {
        Layout = "~/Areas/Technician/Views/Shared/_TopLayout.cshtml";
    }
    else
    {
        Layout = "~/Areas/HelpDesk/Views/Shared/_TopLayout.cshtml";
    }

}
<style>
    .nav-stacked > li {
        border-bottom: 1px solid #f4f4f4;
        margin: 0;
    }

    .editable {
        display: block;
        padding: 9.5px;
        margin: 0 0 10px;
        font-size: 14px;
        line-height: 1.42857143;
        word-wrap: break-word;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

        .editable img {
            max-width: 100%;
            N max-height: 100%;
        }

    .solution-subject {
        cursor: pointer;
    }

    .solution-content {
        white-space: pre-wrap;
    }

    .timeline > li > .timeline-item {
        margin-left: 0px;
        margin-right: 0px;
    }

    h4, h5 {
        color: #345aaa;
        font-weight: bold;
    }

    .heading {
        padding: 5px 40px;
        font-weight: bold;
        font-size: 18px;
    }

        .heading a:hover {
            cursor: pointer;
            background-color: transparent !important;
        }

    .row-content {
        padding: 5px 0px;
    }

    .datetimerow {
        line-height: 20px;
    }

    .pre-wrap {
        white-space: pre-wrap;
    }

    .button {
        margin: 10px 5px;
        width: 80px;
    }

    .select2-dropdown {
        z-index: 1200;
    }

    .select2-container {
        width: 100% !important;
    }

    input, textarea {
        max-width: 800px;
    }

    .pre-wrap {
        white-space: pre-wrap;
    }

    .button {
        text-align: center;
    }

    .border-button {
        border-right: 1px solid #939393;
    }

    .row-button {
        text-align: center;
        margin-left: 15px;
        width: 70px;
    }

   ul.tagit {
        padding: 0px 5px 0px 5px;
        margin-bottom: 0px;
    }
</style>

<div class="row">
    <div class="col-sm-12" style="padding: 10px 55px; margin-top: 0px">
        <h3>#@Model.Code - <span class="text-purple">@Model.Subject</span></h3>
    </div>
    <div class="col-sm-12">
        <div class="box box-solid">
            <div class="box-header bg-gray with-border heading">
                <a class="text-uppercase" data-widget="collapse"><i class="fa fa-file-text header-content"></i> Main Information</a>
            </div>
            <div class="box-body" style="display: block;">
                <div class="col-sm-12 row-content ">
                    <div class="col-sm-12">
                        <div class="col-sm-2 labels">
                            <b>Subject: </b>
                        </div>
                        <div class="col-sm-10" id="Subject">@Html.DisplayFor(model => model.Subject)</div>
                    </div>
                </div>
                <div class="col-sm-12 row-content ">
                    <div class="col-sm-12">
                        <div class="col-sm-2 labels">
                            <b>Description: </b>
                        </div>
                        <div class="col-sm-10">
                            <span class="pre-wrap">@Html.Raw(Model.Description)</span>
                        </div>
                    </div>
                </div>
                <div class="col-sm-12 row-content ">
                    <div class="col-sm-12">
                        <div class="col-sm-2 labels">
                            <b>Attachment: </b>
                        </div>
                        <div class="col-sm-10 pre-wrap">@Html.Raw(Model.DescriptionAttachmentsURL)</div>
                    </div>
                </div>
                @if (!string.IsNullOrWhiteSpace(Model.UnapproveReason))
                {
                    <div class="col-sm-12">
                        <div class="col-sm-2 labels">
                            <b>UnapproveReason: </b>
                        </div>
                        <div class="col-sm-10">
                            <span class="pre-wrap">@Html.DisplayFor(m => m.UnapproveReason)</span>
                        </div>
                    </div>
                }
                <form id="solveForm" role="form" method="POST">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="ID" value="@Model.ID" />
                    <input type="hidden" id="command" name="Command" />
                    <div class="col-sm-12 row-content ">
                        <div class="col-sm-12">
                            <div class="col-sm-2 labels">
                                <b>Solution: </b>
                            </div>
                            <div class="col-sm-10">
                                @Html.TextAreaFor(m => m.Solution, new { @class = "form-control", id = "new-solution", rows = "8" })
                                @Html.ValidationMessageFor(m => m.Solution, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-12 row-content ">
                        <div class="col-sm-12">
                            <div class="col-sm-2 labels">
                                <b>Attachment: </b>
                            </div>
                            <div class="col-sm-10">
                                <input class="form-control" type="file" id="solutionFiles" name="solutionFiles" multiple>
                                <div class="col-sm-12 no-padding" style="margin-top: 10px">
                                    @for (int i = 0; i < Model.SolutionAttachments.Count; i++)
                                    {
                                        <div class="attachment-div" style="display: inline;">
                                            @Html.HiddenFor(it => Model.SolutionAttachments[i].id)
                                            @Html.HiddenFor(it => Model.SolutionAttachments[i].name)
                                            <label class="attachments btn-xs btn-primary btn-flat" data-id="@Model.SolutionAttachments[i].id">@Model.SolutionAttachments[i].name</label>
                                            <span class='attachment-delete'> x </span>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </form>

                <div class="col-sm-12 row-content ">
                    <div class="col-sm-12">
                        <div class="col-sm-2">
                        </div>
                        <div class="col-sm-10">
                            <a id="refer-solution" href="javascript:openReferKnowledgebaseModal()">Refer knowledge base</a>
                        </div>
                    </div>
                </div>
                <div class="col-sm-12 row-content ">
                    <div class="col-sm-6">
                        <div class="col-sm-4 labels">
                            <b>Requester:  </b>
                        </div>
                        <div class="col-sm-8">@Html.DisplayFor(model => model.Requester)</div>
                    </div>
                    <div class="col-sm-6">
                        <div class="col-sm-4 labels">
                            <b>Assigned By:  </b>
                        </div>
                        <div class="col-sm-8">@Html.DisplayFor(model => model.AssignedBy)</div>
                    </div>
                </div>
                <div class="col-sm-12 row-content ">
                    <div class="col-sm-6">
                        <div class="col-sm-4 labels">
                            <b>Created By:  </b>
                        </div>
                        <div class="col-sm-8">@Html.DisplayFor(model => model.CreatedBy)</div>
                    </div>
                    <div class="col-sm-6">
                        <div class="col-sm-4 labels">
                            <b>Solved by:  </b>
                        </div>
                        <div class="col-sm-8">@Html.DisplayFor(model => model.SolvedBy)</div>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(Model.MergedTicketString))
                {
                    <div class="col-sm-12 row-content ">
                        <div class="col-sm-12">
                            <div class="col-sm-2 labels">
                                <b>Merged into:  </b>
                            </div>
                            <div class="col-sm-10">
                                @Html.Raw(Model.MergedTicketString)
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-sm-12">
        <div class="box box-solid">
            <div class="box-header bg-gray with-border heading">
                <a class="text-uppercase" data-widget="collapse"><i class="fa fa-info-circle header-content"></i> Detail</a>
            </div>
            <div class="box-body" style="display: block;">
                <div class="col-sm-12 row-content">
                    <div class="col-sm-6 col-content ">
                        <div class="col-sm-4 labels">
                            <b>Type: </b>
                        </div>
                        <div class="col-sm-8">@Html.DisplayFor(model => model.Type)</div>
                    </div>
                    <div class="col-sm-6 col-content ">
                        <div class="col-sm-4 labels">
                            <b>Mode: </b>
                        </div>
                        <div class="col-sm-8">@Html.DisplayFor(model => model.Mode)</div>
                    </div>
                </div>
                <div class="col-sm-12 row-content">
                    <div class="col-sm-6 col-content ">
                        <div class="col-sm-4 labels">
                            <b>Category: </b>
                        </div>
                        <div class="col-sm-8">@Html.DisplayFor(model => model.Category)</div>
                    </div>
                    <div class="col-sm-6 col-content ">
                        <div class="col-sm-4 labels">
                            <b>Status:  </b>
                        </div>
                        <div class="col-sm-8">
                            @switch (Model.Status)
                            {
                                case "Open": <label class="label label-info">Open</label> break;
                                case "Assigned": <label class="label label-warning">Assigned</label> break;
                                case "Solved": <label class="label label-success">Solved</label> break;
                                case "Unapproved": <label class="label label-danger">Unapproved</label> break;
                                case "Cancelled": <label class="label label-violet">Cancelled</label> break;
                                case "Closed": <label class="label label-default">Closed</label> break;
                            }
                        </div>
                    </div>
                </div>
                <div class="col-sm-12 row-content">
                    <div class="col-sm-6 col-content ">
                        <div class="col-sm-4 labels">
                            <b>Impact: </b>
                        </div>
                        <div class="col-sm-8">@Html.DisplayFor(model => model.Impact)</div>
                    </div>
                    <div class="col-sm-6 col-content ">
                        <div class="col-sm-4 labels">
                            <b>Urgency: </b>
                        </div>
                        <div class="col-sm-8">@Html.DisplayFor(model => model.Urgency)</div>
                    </div>
                </div>
                <div class="col-sm-12 row-content">
                    <div class="col-sm-6 col-content ">
                        <div class="col-sm-4 labels">
                            <b>Impact Detail: </b>
                        </div>
                        <div class="col-sm-8">@Html.DisplayFor(model => model.ImpactDetail)</div>
                    </div>
                    <div class="col-sm-6 col-content ">
                        <div class="col-sm-4 labels">
                            <b>Priority: </b>
                        </div>
                        <div class="col-sm-8">@Html.DisplayFor(model => model.Priority)</div>
                    </div>
                </div>
                <div class="col-sm-12 row-content">
                    <div class="col-sm-12 col-content ">
                        <div class="col-sm-2 labels">
                            <b>Keywords: </b>
                        </div>
                        <div class="col-sm-10"><span id="tags"></span></div>
                    </div>
                </div>
                <div class="col-sm-12 row-content">
                    <div class="col-sm-12 col-content ">
                        <div class="col-sm-2 labels">
                            <b>Note: </b>
                        </div>
                        <div class="col-sm-10">
                            <span class="pre-wrap">@Html.DisplayFor(m => m.Note)</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-12">
        <div class="box box-solid">
            <div class="box-header bg-gray with-border heading">
                <a class="text-uppercase" data-widget="collapse"><i class="fa fa-clock-o header-content"></i> Date & Time</a>
            </div>
            <div class="box-body" style="display: block;">
                <div class="col-sm-12 row-content">
                    <div class="col-sm-6">
                        <div class="col-sm-4 labels">
                            <b>Created time: </b>
                        </div>
                        <div class="col-sm-8 datetimerow">@Html.DisplayFor(model => model.CreatedTimeString)</div>
                    </div>
                    <div class="col-sm-6">
                        <div class="col-sm-4 labels">
                            <b>Last modified time: </b>
                        </div>
                        <div class="col-sm-8 datetimerow">@Html.DisplayFor(model => model.ModifiedTimeString)</div>
                    </div>
                </div>
                <div class="col-sm-12 row-content">
                    <div class="col-sm-6">
                        <div class="col-sm-4 labels">
                            <b>Schedule start date: </b>
                        </div>
                        <div class="col-sm-8 datetimerow">@Html.DisplayFor(model => model.ScheduleStartDateString)</div>
                    </div>
                    <div class="col-sm-6 ">
                        <div class="col-sm-4 labels">
                            <b>Schedule end date: </b>
                        </div>
                        <div class="col-sm-8 datetimerow">@Html.DisplayFor(model => model.ScheduleEndDateString)</div>
                    </div>
                </div>
                <div class="col-sm-12 row-content">
                    <div class="col-sm-6 ">
                        <div class="col-sm-4 labels">
                            <b>Actual start date: </b>
                        </div>
                        <div class="col-sm-8 datetimerow">@Html.DisplayFor(model => model.ActualStartDateString)</div>
                    </div>
                    <div class="col-sm-6 ">
                        <div class="col-sm-4 labels">
                            <b>Actual end date: </b>
                        </div>
                        <div class="col-sm-8 datetimerow">@Html.DisplayFor(model => model.ActualEndDateString)</div>
                    </div>
                </div>
                <div class="col-sm-12 row-content">
                    <div class="col-sm-6 ">
                        <div class="col-sm-4 labels">
                            <b>Solved date: </b>
                        </div>
                        <div class="col-sm-8 datetimerow">@Html.DisplayFor(model => model.SolvedDateString)</div>
                    </div>
                    <div class="col-sm-6 ">
                        <div class="col-sm-4 labels">
                            <b>Due date: </b>
                        </div>
                        <div class="col-sm-8 datetimerow">@Html.DisplayFor(model => model.OverdueDateString)</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row" style="text-align: center;">
        <div class="col-sm-12" style="margin-bottom: 20px">
            <input type="button" id="solveBtn" class="btn btn-primary btn-flat row-button" value="Solve" />
            <input type="button" id="saveBtn" class="btn btn-success btn-flat row-button" value="Save" />
            @if (ViewBag.Role == "Technician")
            {
                @Html.Raw("<a class='btn btn-default btn-flat row-button' href='" + Url.Action("Index", "ManageTicket", new { Area = "Technician" }) + "'>Cancel</a>")
            }
            else
            {
                @Html.Raw("<a class='btn btn-default btn-flat row-button' href='" + Url.Action("Index", "ManageTicket", new { Area = "HelpDesk" }) + "'>Cancel</a>")
            }
        </div>
    </div>
</div>

<div id="modal-refer-knowledgebase" class="modal fade" aria-hidden="true" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Knowledge Base</h4>
            </div>
            <div class="modal-body" style="background-color: #ecf0f5; height: 500px; overflow-y: auto;">
                <a style="padding: 10px;">
                    <div class="input-group">
                        <input type="hidden" id="solution-search" class="form-control">
                        <span class="input-group-btn">
                            <button type="button" id="search-btn" class="btn btn-warning btn-flat">Search</button>
                        </span>
                    </div>
                </a>
                <ul id="result-list" class="nav nav-pills nav-stacked timeline solution-result"></ul>
            </div>
            <div class="modal-footer" style="text-align: center;">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
<!-- /.modal -->

@section scripts{
    <script src="~/Scripts/helpdesk-manage-ticket.js"></script>
    <script>
        $(document).ready(function () {
            $("#tags").html(loadKeywordToTags('@Model.Tags'));

            $(".attachment-delete").on("click", function () {
                var inputs = $(this).parent().find(':input');
                inputs.each(function (index, element) {
                    element.value = "";
                });
                $(this).parent().addClass("hidden");
            });

            $("#solution-search").tagit({
                allowSpaces: true,
                autocomplete: {
                    source: "/Ticket/GetKeywords"
                }
            });

        });

        $("#search-btn").on("click", function () {
            $.ajax({
                url: "/Ticket/SearchSolution/",
                method: "POST",
                data: {
                    keywords: $("#solution-search").val()
                },
                success: function (data) {
                    if (data.success) {
                        $('#result-list').empty();
                        if (data.data.length == 0) {
                            $('#result-list').append('<li>No compatible solution.</li>');
                        }
                        $.each(data.data, function (index, element) {
                            $('#result-list').append('<li><div class="timeline-item"><a class="time text-green solution-refer" href="javascript:insertURL(\''
                                    + element.Path
                                    + '\')">Refer</a><h3 class="timeline-header no-border"><a class="solution-subject" data-id="'
                                    + element.Id + '">' + element.Subject
                                    + '</a></h3><div class="timeline-body" style="display:none;"><div contentEditable="true" class="solution-content editable"></div></div></div></li>');
                            //$('#result-list')
                            //        .append('<li><div class="timeline-item"><a class="time text-green solution-refer" href="javascript:insertURL('
                            //        //+ element.URL
                            //        + ')">Refer</a><h3 class="timeline-header no-border"><a class="solution-subject" data-id="'
                            //        + element.Id + '">' + element.Subject
                            //        + '</a></h3><div class="timeline-body" style="display:none;"><pre class="solution-content" style="font-weight: 600;"></pre></div></div></li>');

                        });
                    } else {
                        noty({
                            text: data.msg,
                            type: "error",
                            layout: "topRight",
                            timeout: 2000
                        });
                    }
                },
                error: function (e) {
                    noty({
                        text: "Cannot connect to server!",
                        type: "error",
                        layout: "topRight",
                        timeout: 2000
                    });
                }
            });
        });

        $('#result-list').on('click', 'a[class="solution-subject"]', function (e) {
            var index = $(".solution-subject").index(this);
            var contentBox = $(".timeline-body").eq(index);
            var content = $(".solution-content").eq(index);
            if (contentBox.is(":hidden")) {
                $.ajax({
                    "url": "/Ticket/GetSolutionContent/",
                    "method": "POST",
                    "data": {
                        id: $(this)[0].getAttribute("data-id")
                    },
                    "success": function (data) {
                        if (data.success) {
                            content.html(data.data);
                            //content.text(data.data.replace(/\r\n/g, EOL));
                        } else {
                            content.text("No solution.");
                        }
                        $(".timeline-body").hide();
                        contentBox.toggle();
                    },
                    "error": function (e) {
                        noty({
                            text: "Some error occured. Please try again later!",
                            type: "error",
                            layout: "topRight",
                            timeout: 2000
                        });
                    }
                });
            } else {
                contentBox.toggle();
            }
        });



        function insertURL(url) {
            $("#new-solution").val($("#new-solution").val() + '\n' + url);
            noty({
                text: 'Solution\'s link is inserted!',
                layout: "topCenter",
                type: "success",
                timeout: 2000
            });
        };

        function openReferKnowledgebaseModal() {
            $.ajax({
                url: "/Ticket/GetTags",
                type: "GET",
                dataType: "json",
                data: {
                    subject: $("#Subject")[0].innerHTML
                },
                success: function (data) {
                    for (var i = 0; i < data.data.length; i++) {
                        $('#solution-search').tagit('createTag', data.data[i]);
                    }
                    $("#search-btn").click();
                    $("#modal-refer-knowledgebase").modal("show");
                }
            });
        }

        $("#solution-search").change(function () {
            $("#search-btn").click();
        });

        $("#solveBtn, #saveBtn").on("click", function () {
            if (!checkUploadFile()) {
                return;
            }
            $("#command").val($(this).val());
            var dict = new Array();
            $(".attachments")
                .each(function (index) {
                    dict.push({
                        "id": $(".attachments")[index].getAttribute("data-id"),
                        "name": $(".attachments")[index].textContent
                    });
                });
            var formData = new FormData($("#solveForm")[0]);
            $.ajax({
                url: "/Ticket/SolveTicket/",
                method: "POST",
                data: formData,
                contentType: false,
                processData: false,
                enctype: 'multipart/form-data',
                success: function (data) {
                    if (!data.success) {
                        noty({
                            text: data.msg,
                            layout: "topRight",
                            type: "error",
                            timeout: 2000
                        });
                    } else {
                        noty({
                            text: data.msg,
                            layout: "topCenter",
                            type: "success",
                            timeout: 2000
                        });
                        if (data.userRole == "Helpdesk") {
                            setTimeout(function () {
                                window.location.href = "/HelpDesk/ManageTicket/";
                            }, 1000);
                        } else if (data.userRole == "Technician") {
                            setTimeout(function () {
                                window.location.href = "/Technician/ManageTicket/";
                            }, 1000);
                        }
                    }
                }
            });
        });
    </script>
}
